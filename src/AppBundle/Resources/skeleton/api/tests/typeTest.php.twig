<?php
/**
 * {{ type_class }} Test
 *
 * @author {{ users_name }} <{{ users_email }}>
* @package api
* @category test
* @since {{ date_since }}
*/

namespace {{ namespace }}\Tests\Form;

use {{ namespace }}\Form\{{ type_class }};
use {{ entity }};
use Symfony\Component\Form\Test\TypeTestCase;
use Symfony\Component\Form\Forms;
use Nelmio\ApiDocBundle\Form\Extension\DescriptionFormTypeExtension;

class {{ entity_class }}TypeTest extends TypeTestCase
{
    protected function setUp()
    {
        parent::setUp();

        $this->factory = Forms::createFormFactoryBuilder()
            ->addExtensions($this->getExtensions())
            ->addTypeExtension(
                new DescriptionFormTypeExtension()
            )
            ->getFormFactory();

        $this->builder->setFormFactory($this->factory);
    }

    public function testSubmitValidData()
    {
        $formData = [
{% for key,val in sample_data %}
            '{{ key }}' => {{ val }},
{% endfor %}
        ];

        $type = new {{ type_class }}();
        $form = $this->factory->create($type);

        $object = new {{ entity_class }}();
{% for key,val in sample_data %}
        $object->set{{ key[0:1]|upper ~ key[1:] }}({{ val }});
{% endfor %}

        // submit the data to the form directly
        $form->submit($formData);

        $this->assertTrue($form->isSynchronized());
        $this->assertEquals($object, $form->getData());

        $view = $form->createView();
        $children = $view->children;

        foreach (array_keys($formData) as $key) {
            $this->assertArrayHasKey($key, $children);
        }
    }
}