<?php
// Auto-generated by the console command generate:doctrine:fixtures
// WARNING: Manual editing will be lost when command is run again

namespace AppBundle\DataFixtures\ORM;

use IMS\CommonBundle\Entity\Vehicle;
use AppBundle\DataFixtures\BaseFixture;
use Doctrine\Common\DataFixtures\OrderedFixtureInterface;
use Doctrine\Common\Persistence\ObjectManager;

class LoadVehicleData extends BaseFixture implements OrderedFixtureInterface
{
    /**
     * Load data fixtures with the passed EntityManager
     *
     * @param ObjectManager $manager
     */
    public function load(ObjectManager $manager)
    {
        $data = [
            ['vin' => 'vin1234'],
        ];
        
        for ($i = 0; $i < 30; $i++) {
            $entity = new Vehicle();

            $entity->setVin(isset($data[$i]['vin']) ? $data[$i]['vin'] : $this->uniqueRandomWord('vin', 10, 20));
            $entity->setReg($this->randomPronounceableWord(1, 2));
            $entity->setVehicleStatus(mt_rand(1,100));
            $entity->setVehicleType(mt_rand(1,100));
            $entity->setDoors(mt_rand(1,100));
            $entity->setSeats(mt_rand(1,100));
            $entity->setDrive($this->randomPronounceableWord(1, 1));
            $entity->setOdometer(mt_rand(1,100));
            $entity->setOdometerCanonical(mt_rand(1,100));
            $entity->setOdometerUnit($this->randomPronounceableWord(1, 2));
            $entity->setDateRegistered(new \DateTime());
            $entity->setDateAdded(new \DateTime());
            $entity->setDateUpdated(new \DateTime());
            $entity->setAddedBy($this->randomPronounceableWord(2, 20));
            $entity->setUpdatedBy($this->randomPronounceableWord(2, 20));
            $entity->setIsNew(rand(0, 1) ? false : true);
            $entity->setIsManufacturerApproved(rand(0, 1) ? false : true);
            $entity->setIsFeatured(rand(0, 1) ? false : true);
            $entity->setIsVisible(rand(0, 1) ? false : true);
            $entity->setStatus(1);
            $entity->setManufacturer($this->getReference('IMS_CommonBundle_Entity_Manufacturer'.($i % 4)));
            $entity->setModel($this->getReference('IMS_CommonBundle_Entity_Model'.$i));
            $entity->setVariant($this->getReference('IMS_CommonBundle_Entity_Variant'.$i));
            $entity->setDealer($this->getReference('IMS_CommonBundle_Entity_Dealer'.$i));
            $entity->setTransmission($this->getReference('IMS_CommonBundle_Entity_Transmission'.$i));
            $entity->setEngine($this->getReference('IMS_CommonBundle_Entity_Engine'.$i));
            $entity->setBodystyle($this->getReference('IMS_CommonBundle_Entity_Bodystyle'.$i));
            $entity->setColourExterior($this->getReference('IMS_CommonBundle_Entity_Colour'.$i));
            $entity->setTrim($this->getReference('IMS_CommonBundle_Entity_Trim'.$i));
            $entity->setTrimMaterial($this->getReference('IMS_CommonBundle_Entity_TrimMaterial'.$i));
            $entity->setTrimShade($this->getReference('IMS_CommonBundle_Entity_TrimShade'.$i));
            $entity->setWheelbase($this->getReference('IMS_CommonBundle_Entity_Wheelbase'.$i));
            $entity->setTechnicalSpecificationData($this->getReference('IMS_CommonBundle_Entity_TechnicalSpecificationData'.$i));
            $entity->setPackage($this->getReference('IMS_CommonBundle_Entity_Package'.$i));
            if ($this->hasReference('IMS_CommonBundle_Entity_Equipment'.$i, $entity)) {
                $entity->addEquipment($this->getReference('IMS_CommonBundle_Entity_Equipment'.$i));
            }
            
            $manager->persist($entity);
            $this->addReference('IMS_CommonBundle_Entity_Vehicle'.$i, $entity);
        }

        $manager->flush();
    }

    /**
     * Get the order of this fixture
     *
     * @return integer
     */
    public function getOrder()
    {
        return 34;
    }

}